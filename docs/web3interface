//PoolFactory pool queries

/**
* Return all existing pool addresses in a list
*
* Frontend page: PoolFactory info page
*
* @return {string[]} all existing pool addresses in a list
*/
getAllPools: async function(){

},

/**
* Return one pool address of the given index
*
* Frontend page: PoolFactory info page
*
* @param {number} index
* @return {string} Pool address
*/
getPool: async function(index){

},

/**
*Returns a list of pool addresses between a first and last index (including boundaries)
* 
* Frontend page: PoolFactory info page
*
* @param {number} firstIndex 
* @param {number} lastIndex	
* @return {string[]} list of pool adresses in range
*/
getPoolRange: async function(firstIndex, lastIndex){

},

/**
* Retuns the number of pools created by the pool factory
*
* Frontend page: PoolFactory info page
*
* @return {number} number of pools
*/
getPoolNumber: async function(){

},

/**
* Returns pool list for a sale address
*
* Frontend page: PoolFactory info page
*
* @param {string} saleAddress
* @return {string[]} list of pool adresses for a given sale
*/
getPoolsBySales: async function(saleAddress){

},

/**
* Cheks if a pool exists
*
* Frontend page: PoolFactory info page
*
* @param {string} poolAddress
* @return {boolean} true if pool exists, fales if not
*/
checkIfPoolExists: async function(poolAddress){

},

//PoolFactory param getters

/**
* Get owner address of pool factory
*
* Frontend page: PoolFactory info page
*
* @return {string} owner address of pool factory
*/
getOwner: async function(){

},

/**
* Get the KYC contract address tied to the PoolFactory contract
*
* Frontend page: PoolFactory info page
*
* @return {string} KYC contract address
*/
getPoolFactoryKycContractAddress: async function(){

},

/**
* Get flat fee for pool creation (1/1000)
*
* Frontend page: PoolFactory info page
*
* @return {BigNumber} flat fee for pool creation (1/1000)
*/
getFlatFee: async function(){

},

/**
* Get fee rate for maximum pool allocation (1/1000)
*
* Frontend page: PoolFactory info page
*
* @return {BigNumber} fee rate for maximum pool allocation (1/1000)
*/
getMaxAllocationFeeRate: async function(){

},

/**
* Get maximum allowed fee rates set by crators for pools (1/1000)
*
* Frontend page: PoolFactory info page
*
* @return {BigNumber} maximum allowed fee rate (1/1000)
*/
getMaxCreatorFeeRate: async function(){

},

/**
* Get provider fee rate for pools (1/1000)
*
* Frontend page: PoolFactory info page
*
* @return {BigNumber} Get provider fee rate for pools (1/1000)
*/
getProviderFeeRate: async function(){

},

//PoolFactory param setters (onlyOwner)

/**
* Set owner address in PoolFactory contract, only current owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {string} ownerAddress
*/
setOwner: async function(ownerAddress){

},

/**
* Set KYC contract address in PoolFactory contract, only owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {string} kycContractAddress
*/
setKycContractAddress: async function(kycContractAddress){

},

/**
* Set flat fee in PoolFactory contract for creating pools, only owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {BigNumber} flatFee flat fee for pool creation
*/
setFlatFee: async function(flatFee){

},

/**
* Set maximum allocation fee for creating pools, only owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {BigNumber} maxAllocationFeeRate fee "taxing" the maximum allocation parameter
*/
setMaxAllocationFeeRate: async function(maxAllocationFeeRate){

},

/**
* Set maximum allowed fee for pool creators, only owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {BigNumber} maxCreatorFeeRate maximum amount of fee creators can set for a pool
*/
setMaxCreatorFeeRate: async function(maxCreatorFeeRate){

},

/**
* Set provider fee rate for creating pools, only owner has authority
*
* Frontend page: PoolFactory admin page for provider/owner
*
* @param {BigNumber} providerFeeRate provider fees for pools
*/
setProviderFeeRate: async function(providerFeeRate){

},

//Pool factory stats getters

/**
* Retruns the whole ETH balace of the PoolFactory contract
*
* Frontend page: PoolFactory info page
*
* @return {BigNumber} the whole ETH balace of the PoolFactory contract
*/
getPoolFactoryBalance: async function(){

},

//PoolFactory operations

/**
* Function for creating pools, needs ethereum sent to it (payable)
*
* Frontend page: Pool creation page
*
* @param {string} saleAddress address of the ICO token sale contract
* @param {string} tokenAddress address of the erc20 token distributed in the sale
* @param {BigNumber} creatorFeeRate 1/1000 fee rate of the pool income payed to the pool creator
* @param {BigNumber} saleStartDate unix timestamp in seconds of the start of the sale
* @param {BigNumber} saleEndDate unix timestamp in seconds of the end of the sale
* @param {BigNumber} minContribution minimum amount of ETH contribution allowed in one tx
* @param {BigNumber} maxContribution maximum amount of ETH contribution allowed in one tx
* @param {BigNumber} minPoolGoal minimum amount of ETH needed to be raised by the pool for the sale
* @param {BigNumber} maxPoolAllocation maximum amount of ETH allowed to be raised by the pool for the sale
* @param {BigNumber} withdrawTimelock unix timestamp in seconds for how much time funds are locked from withdrawal after contribution
* @param {boolean} whitelistPool pool has address whitelist or not
*/
createPool: async function(
    saleAddress, 
    tokenAddress, 
    creatorFeeRate, 
    saleStartDate, 
    saleEndDate, 
    minContribution, 
    maxContribution, 
    minPoolGoal, 
    maxPoolAllocation, 
    withdrawTimelock, 
    whitelistPool
){

},

/**
* Function for owner to withdraw accumulated fees from PoolFactory
*
* Frontend page: PoolFactory admin page for provider/owner
*
*/
withdraw: async function(){ //onlyOwner

},

//Pool
//Pool param getters

/**
* Get the KYC contract address tied to the Pool contract
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} address of the KYC contract
*/
getPoolKycContractAddress: async function(poolAddress){

},

/**
* Address of the service provider (same as pool factory owner)
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} address provider
*/
getProviderAddress: async function(poolAddress){

},

/**
* Address of the pool creator
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} pool creator address
*/
getCreatorAddress: async function(poolAddress){

},

/**
* Get fee rate for the service provider after every pool income (1/1000)
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} provider fee rate
*/
getProviderFeeRate: async function(poolAddress){

},

/**
* Get fee rate for the pool creator after every pool income (1/1000)
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} creator fee rate
*/
getCreatorFeeRate: async function(poolAddress){

},

/**
* Get address of the ICO token sale contract the pool is raising funds for
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} sale contract address
*/
getSaleAddress: async function(poolAddress){

},    

/**
* Get address of the erc20 token distributed in the sale
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} token address
*/  
getTokenAddress: async function(poolAddress){

},

/**
* Get minimum amount of ETH contribution allowed in one tx
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} minium contribution
*/    
getMinContribution: async function(poolAddress){

},

/**
* Get maximum amount of ETH contribution allowed in one tx
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} maximum contribution
*/
getMaxContribution: async function(poolAddress){

},

/**
* Getminimum amount of ETH needed to be raised by the pool for the sale
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} minimum pool goal
*/
getMinPoolGoal: async function(poolAddress){

},

/**
* Get maximum amount of ETH allowed to be raised by the pool for the sale
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} max pool goal
*/
getMaxPoolGoal: async function(poolAddress){

},

/**
* Get unix timestamp in seconds for how much time funds are locked from withdrawal after contribution
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} withdraw timelock
*/
getWithdrawTimelock: async function(poolAddress){

},

/**
* Get sale function signature for the case of sales, that unable to receive funds the anonymus fallback function
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} sale function signature
*/
getSaleParticipateFunctionSig: async function(poolAddress){

},

/** 
* Get withdraw function signature for the case of sales, that unable push out tokens automatically
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string} withdraw function signature
*/
getSaleWtidrawFunctionSig: async function(poolAddress){

},

/**
*Check if the pool enforces a whitelist for participants
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {boolean} is whitelist pool
*/
isWhitelistPool: async function(poolAddress){

},

/**
* Checik if a given address is an admin address for the pool
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} address address to check
* @return {bool} is admin
*/
isAdmin: async function(poolAddress, address){

},

/**
* Check if the given address is on the whitelist of the pool
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} address address to check
* @return {bool} is on whitelist
*/
isOnWhitelist: async function(poolAddress, address){

},

/**
* Check a country code if its on blacklist for the pool
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} countryCode 3 letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) 
* @return {boolean} is on blacklist
*/
isOnCountryBlacklist: async function(poolAddress, countryCode){

},

//Pool stats getters

/**
* Get all ETH balance of a given pool contract
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} ETH balance
*/
getPoolBalance: async function(poolAddress){

},

/**
* Get all ETH contributions of the pool without applying fees
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} all gross contributions
*/
getAllGrossContributions: async function(poolAddress){

},

/**
* Get ETH amount that the pool creator collected from fees
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} creator stash
*/
getCreatorStash: async function(poolAddress){

},

/**
* Get ETH amount that the service provider collected from fees
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {BigNumber} provider stash
*/
getProviderStash: async function(poolAddress){

},

/**
* Get total token amouts that has been payed out the by pool by different tokens
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} tokenAddress address of the token we want to query the payout amount in ETH is 0x0
* @return {BigNumber} payout amount
*/
getTotalPayedOutByToken: async function(poolAddress, tokenAddress){

},

/**
* Cehck if the pool funds have been sent to sale
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {boolean} true: sent, false: not sent yet
*/
isSentToSale: async function(poolAddress){

},

/**
* Check if token receiving is confirmed
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {boolean} true: confirmed, false: not confirmed yet
*/
areTokensReceivedConfirmed: async function(poolAddress){

},

//Pool contributor queries

/**
* Get the address list of all pool contributors
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {string[]} address list of all pool contributors
*/
getAllContibutors: async function(poolAddress){

},

/**
* Get pool contributor address at index
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {number} index
* @return {string} pool contributor address
*/    
getContributor: async function(poolAddress, index){

},

/**
* Get number of individual pool contributors
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @return {number} number of individual pool contributors
*/
getContributorNumber: async function(poolAddress){

},

/**
* Get the least contribuition time of a specific contributor
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} contributorAddress address of contributor
* @return {BiGNumber} contribution time
*/
getLastContributionTimeByContributor: async function(poolAddress, contributorAddress){

},

/**
* Get ETH contribution amount before fees applied by pool contributor
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} contributorAddress contributor address
* @return {BigNumber} contribution amount
*/
getGrossContributionByContributor: async function(poolAddress, contributorAddress){

},

/**
* Get payout amounts by token by pool contributor
*
* Frontend page: Pool info page (can be the same as Pool contributor page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} contributorAddress contributor address
* @param {string} tokenAddress token address in case of ETH 0x0
* @return {BigNumber} tonken amount
*/
getPayedOutByContributorByToken: async function(poolAddress, contributorAddress, tokenAddress){

},

//Pool operations

/**
* Add a new pool admin address (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} adminAddress address of new admin
*/
addAdmin: async function(poolAddress, adminAddress){

},

/**
* Add list of new admin addresses (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string[]} adminAddressList address list of new admins
*/
addAdminList: async function(poolAddress, adminAddressList){

},

/**
* Remove admin by address (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} adminAddress address of admin to remove
*/
removeAdmin: async function(poolAddress, adminAddress){

},

/**
* Add address to pool whiteslist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} whitelistAddress address to add to whitelist
*/
addWhitelist: async function(poolAddress, whitelistAddress){

},

/**
* Add list of addresses to pool whiteslist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string[]} whitelistAddressList list of addresses to add to whitelist
*/
addWhitelistList: async function(poolAddress, whitelistAddressList){

},

/**
* Remove address from pool whiteslist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} whitelistAddress address to remove from whitelist
*/
removeWhitelist: async function(poolAddress, whitelistAddress){

},

/**
* Add country code to country blacklist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} countryCode 3 letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) 
*/
addCountryBlacklist: async function(poolAddress, countryCode){

},

/**
* Add list of country codes to country blacklist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string[]} countryCode list of 3 letter country codes (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) 
*/
addCountryBlacklistList: async function(poolAddress, countryCodeList){

},

/**
* Remove country code from country blacklist (only admin)
*
* Frontend page: Pool admin page for pool admins
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} countryCode 3 letter country code (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) 
*/
removeCountryBlacklist: async function(poolAddress, countryCode){

},

/**
* Contribute to pool payable - tx has to have ETH value
*
* Frontend page: Pool contributor page (can be the same as Pool info page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
contribute: async function(poolAddress){

},

/**
* Withdraw funds from the token before being sent to sale
*
* Frontend page: Pool contributor page (can be the same as Pool info page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
withdraw: async function(poolAddress){

},

/**
* Withdraw funds from the token after being sent to sale and being refunded from sale to pool contract
*
* Frontend page: Pool contributor page (can be the same as Pool info page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
withdrawRefund: async function(poolAddress){

},

/**
* Withdraw main erc20 token from the pool (sepcified by tokenAddress)
*
* Frontend page: Pool contributor page (can be the same as Pool info page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
withdrawToken: async function(poolAddress){

},

/**
* Withdraw given erc20 token from the pool (sepcified by tokenAddress)
*
* Frontend page: Pool contributor page (can be the same as Pool info page)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} tokenAddress erc 20 token address (this cannot be ETH, so no 0x0 allowed here)
*/
withdrawCustomToken: async function(poolAddress, tokenAddress){

},

/**
* Push out pool main tokens to participants (only admin, mostly for token push server)
*
* Frontend page: Pool admin page for pool admins (but mostly called by token push server, might not even on frontend)
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} recipientAddress address to push out their coins
*/
pushOutToken: async function(poolAddress, recipientAddress){

},

/**
* Change erc20 token address distributed by the sale for the pool (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} tokenAddress new token address
*/
//DUPLICATE changeTokenAddress: async function(poolAddress, tokenAddress){ 
//
//},

/**
* Confirm that the tokens are received from the sale (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} tokensExpected amount of tokens expected from the sale
*/
confirmTokensReceived: async function(poolAddress, tokensExpected){

},

/**
* Send pool funds to sale (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
sendToSale: async function(poolAddress){

},

/**
* Send pool funds to sale to predefined special function (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
*/
sendToSaleFunction: async function(poolAddress){

},

/**
* Whitdraw tokens from sale with predefined special function (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with
*/
withdrawFromSaleFunction: async function(poolAddress){

},

/**
* Withdraw provider fee from the stash (onyl provider)
*
* Frontend page: Pool admin page for provider
*
* @param {string} poolAddress address of the Pool this function iteracts with
*/
poviderWithdraw: async function(poolAddress){

},

/**
* Withdraw creator fee from the stash (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with
*/
creatorWithdraw: async function(poolAddress){

},

//Pool param setters

/**
* Set provider address (only provider)
*
* Frontend page: Pool admin page for provider
*
* @param {string} poolAddress address of the Pool this function iteracts with
* @param {string} providerAddress new provider address
*/
setProvider: async function(poolAddress, providerAddress){

},

/**
* Set creator address (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with
* @param {string} creatorAddress new creator address
*/
setCreator: async function(poolAddress, creatorAddress){

},

/**
* Set provider fee rate (only provider)
*
* Frontend page: Pool admin page for provider
*
* @param {string} poolAddress address of the Pool this function iteracts with
* @param {BigNumber} providerFeeRate new provider fee rate (1/100)
*/
setProviderFeeRate: async function(poolAddress, providerFeeRate){

},

/**
* Set creator fee rate (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with
* @param {BigNumber} creatorFeeRate new creator fee rate (1/100)
*/
setCreatorFeeRate: async function(poolAddress, creatorFeeRate){

},

/**
* Change erc20 token address distributed by the sale for the pool (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {string} tokenAddress new token address
*/
setTokenAddress: async function(poolAddress, tokenAddress){

},

/**
* Set if pool is whitelist pool (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {bool} isWhitelistPool
*/
setWhitelistPool: async function(poolAddress, isWhitelistPool){

},

/**
* Set new sale start date (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} saleStartDate
*/
setSaleStartDate: async function(poolAddress, saleStartDate){

},

/**
* Set new sale end date (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} saleEndDate
*/
setSaleEndDate: async function(poolAddress, saleEndDate){

},

/**
* Set new minimum amount of ETH contribution allowed in one tx (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} minContribution new minimum contribution
*/
setMinContribution: async function(poolAddress, minContribution){

},

/**
* Set new maximum amount of ETH contribution allowed in one tx (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} maxContribution new maximum contribution
*/
setMaxContribution: async function(poolAddress, maxContribution){

},

/**
* Set new minimum amount of ETH needed to be raised by the pool for the sale (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} minPoolGoal new minimum pool goal
*/
setMinPoolGoal: async function(poolAddress, minPoolGoal){

},

/**
* Set new maximum amount of ETH allowed to be raised by the pool for the sale (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} maxPoolAllocation new maximum pool allocation
*/
setMaxPoolAllocation: async function(poolAddress, maxPoolAllocation){

},

/**
* Set new unix timestamp in seconds for how much time funds are locked from withdrawal after contribution (only creator)
*
* Frontend page: Pool admin page for pool creator
*
* @param {string} poolAddress address of the Pool this function iteracts with 
* @param {BigNumber} withdrawTimelock new withdraw timelock
*/
setWithdrawTimelock: async function(poolAddress, withdrawTimelock){

}